// Generated by CodiumAI

describe('code snippet', () => {

    // The server should start and listen on the specified port
    it('should start and listen on the specified port', () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      return request.get('/')
        .expect(200)
        .expect('Content-Type', 'text/html')
        .expect('Hey guys!');
    });

    // When a GET request is made to the root route, the server should respond with the message "Hey guys!"
    it('should respond with the message "Hey guys!" when a GET request is made to the root route', () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      return request.get('/')
        .expect(200)
        .expect('Content-Type', 'text/html')
        .expect('Hey guys!');
    });

    // Sending a GET request to a non-existent route should result in a 404 error
    it('should result in a 404 error when sending a GET request to a non-existent route', () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      return request.get('/nonexistent')
        .expect(404);
    });

    // Sending a request with an unsupported HTTP method should result in a 405 error
    it('should result in a 405 error when sending a request with an unsupported HTTP method', () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      return request.post('/')
        .expect(405);
    });

    // The server should set the Content-Type header to "text/html" for the response
    it('should set the Content-Type header to "text/html" for the response', () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      return request.get('/')
        .expect('Content-Type', 'text/html');
    });

    // The server should handle concurrent requests without crashing
    it('should handle concurrent requests without crashing', async () => {
      const express = require('express');
      const supertest = require('supertest');
      const app = require('./code_under_test');

      const request = supertest(app);

      await Promise.all([
        request.get('/'),
        request.get('/'),
        request.get('/'),
      ]);
    });
});
